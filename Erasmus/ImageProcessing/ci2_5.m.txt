clear all;
close all;

%load features and targets
%targets is matrix with target classes marked as 1 for each object
%each row is one class and each column is one object
%features used are area and roundness
load features_new.mat;
load targets.mat;

%for patternnet the input objects must be in columns
inputs = features';

%create patternnet network, default hidden layer size is 10, you can also
%specify training function, default is trainscg
net = patternnet(10);

%these are defaults, 70% of the objects are used for training, and 15% for
%validation and 15% testing
net.divideParam.trainRatio = 70/100; %random 8 objects
net.divideParam.valRatio = 15/100; %2 objects
net.divideParam.testRatio = 15/100; %2 objects

%train network
[net,tr] = train(net,inputs,targets);

%classification using network
outputs = net(inputs);

%confusion matrix, the result depends on which objects are used for
%training
plotconfusion(targets,outputs);

%read preprocessed image, find connected components and get PixelList
img=imread('preprocessed.png');
cc=bwconncomp(img);
s=regionprops(cc,'PixelList');

labels=vec2ind(outputs); %converts output vectors to indices which are used as labels
img2=zeros(size(img)); %empty image

for j=1:cc.NumObjects
    %take objects one at a time, make empty binary image using false and
    %size function. Pixels in each object can be get from the PixelList of
    %the object. 
    obj=false(size(img));
    for i=1:length(s(j).PixelList)
        obj(s(j).PixelList(i,2),s(j).PixelList(i,1))=1;
    end
    %And finally pixels of the current object get the label of
    %the cluster it belongs to.
    img2(obj==1)=labels(j);
end
figure;imshow(label2rgb(img2)); %visualize using label2rgb
